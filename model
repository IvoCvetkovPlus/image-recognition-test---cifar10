# -*- coding: utf-8 -*-
"""
Created on Tue Jul  4 14:47:26 2023

@author: user
"""

import ssl
import numpy as np
import tensorflow 
import keras 
from keras import datasets,utils,models,layers
#from tensorflow.keras.layers import Conv2D
from tensorflow.keras import optimizers
import sys
import matplotlib.pyplot as plt
import os
os.environ['KMP_DUPLICATE_LIB_OK']='True'


ssl._create_default_https_context = ssl._create_unverified_context

(x_train,y_train),(x_test,y_test) = keras.datasets.cifar10.load_data()

NUM_CLASSES = 10

x_train = x_train.astype('float32')/255.0
x_test = x_test.astype('float32')/255.0

y_train = utils.to_categorical(y_train,NUM_CLASSES)
y_test = utils.to_categorical(y_test,NUM_CLASSES)

##testing sequential architecture

#model = models.Sequential([
    
 #   layers.Flatten(input_shape=(32,32,3)),
  #  layers.Dense(200,activation = 'relu'),
   # layers.Dense(150,activation = 'relu'),
    #layers.Dense(10,activation = 'softmax'),
     
#])

input_layer = layers.Input(shape=(32,32,3))
x = layers.Flatten()(input_layer)
x = layers.Dense(units=350,activation = 'relu')(x)
x = layers.Dense(units=200,activation = 'relu')(x)
output_layer = layers.Dense(units=10, activation="softmax")(x)
model = models.Model(input_layer,output_layer)

opt = optimizers.Adam(learning_rate=0.0003)
model.compile(loss='categorical_crossentropy', optimizer=opt,
metrics=['accuracy'])


model.fit(x_train
, y_train
, batch_size = 32
, epochs = 10
, shuffle = True
)
CLASSES = np.array(['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog'
, 'frog', 'horse', 'ship', 'truck'])
preds = model.predict(x_test)
preds_single = CLASSES[np.argmax(preds, axis = -1)]
actual_single = CLASSES[np.argmax(y_test, axis = -1)]

n_to_show = 10
indices = np.random.choice(range(len(x_test)), n_to_show)
fig = plt.figure(figsize=(25, 5))
fig.subplots_adjust(hspace=0.4, wspace=0.4)
for i, idx in enumerate(indices):
   img = x_test[idx]
   ax = fig.add_subplot(1, n_to_show, i+1)
   ax.axis('off')
   ax.text(0.5, -0.35, 'pred = ' + str(preds_single[idx]), fontsize=10,
     ha='center', transform=ax.transAxes),
   ax.text(0.5, -0.7, 'act = ' + str(actual_single[idx]), fontsize=10
     , ha='center', transform=ax.transAxes)
   ax.imshow(img)
